{"version":3,"sources":["components/ShopifyButton.js","components/Product.js","components/Products.js","components/About.js","components/Footer.js","network.js","App.js","serviceWorker.js","index.js"],"names":["id","a","window","ShopifyBuy","UI","onReady","shopifyClient","createComponent","node","document","getElementById","moneyFormat","options","ShopifyButton","props","useEffect","setupButton","className","Product","product","title","class","src","image","Products","products","map","key","About","console","log","children","Footer","urls","productsLocal","about","getAboutInformation","axios","get","request","data","getProducts","App","useState","setAbout","setProducts","Promise","all","aboutText","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.01a0ce99.chunk.js","sourcesContent":["import React, {useEffect} from 'react';\nimport './ShopifyButton.scss';\n\nfunction ShopifyButton(props) {\n\n  useEffect(() => {\n    setupButton(props.id);\n  }, [props.id]);\n\n  return (\n    <div className=\"shopify-button\">\n      <div id={`product-component-${props.id}`}></div>\n    </div>\n  );\n}\n\nasync function setupButton(id) {\n  const ui = await window.ShopifyBuy.UI.onReady(window.shopifyClient);\n  ui.createComponent('product', {\n        id: id,\n        node: document.getElementById(`product-component-${id}`),\n        moneyFormat: '%24%7B%7Bamount%7D%7D',\n        options: {\n  \"product\": {\n    \"styles\": {\n      \"product\": {\n        \"@media (min-width: 601px)\": {\n          \"max-width\": \"calc(25% - 20px)\",\n          \"margin-left\": \"20px\",\n          \"margin-bottom\": \"50px\"\n        },\n        \"padding\": \"20px\"\n      }\n    },\n    \"buttonDestination\": \"modal\",\n    \"contents\": {\n      \"img\": false,\n      \"title\": false,\n      \"price\": false,\n      \"options\": false\n    },\n    \"text\": {\n      \"button\": \"View product\"\n    }\n  },\n  \"productSet\": {\n    \"styles\": {\n      \"products\": {\n        \"@media (min-width: 601px)\": {\n          \"margin-left\": \"-20px\"\n        }\n      }\n    }\n  },\n  \"modalProduct\": {\n    \"contents\": {\n      \"img\": false,\n      \"imgWithCarousel\": true,\n      \"button\": false,\n      \"buttonWithQuantity\": true\n    },\n    \"styles\": {\n      \"product\": {\n        \"@media (min-width: 601px)\": {\n          \"max-width\": \"100%\",\n          \"margin-left\": \"0px\",\n          \"margin-bottom\": \"0px\"\n        }\n      }\n    },\n    \"text\": {\n      \"button\": \"Add to cart\"\n    }\n  },\n  \"cart\": {\n    \"text\": {\n      \"total\": \"Subtotal\",\n      \"button\": \"Checkout\"\n    }\n  }\n},\n});\n}\n\nexport default ShopifyButton;","import React from 'react';\nimport './Product.scss';\nimport ShopifyButton from './ShopifyButton';\n\nfunction Product(props) {\n  return (\n    <article className=\"product\">\n      <h3>{props.product.title}</h3>\n      <section class=\"product__image\">\n        <img src={props.product.image.src}></img>\n      </section>\n      <ShopifyButton id={props.product.id}></ShopifyButton>\n    </article>\n  );\n}\n\nexport default Product;","import React, {Fragment} from 'react';\nimport Product from './Product';\n\nimport './Products.scss';\n\nfunction Products(props) {\n  const products = props.products.map(product => (<Product key={product.id} product={product}></Product>));\n  return (\n    <Fragment>\n    <h2>Products</h2>\n    <section className=\"products\">\n      {products}\n    </section>\n    </Fragment>\n  );\n}\n\nexport default Products;","import React from 'react';\nimport './About.scss';\n\nfunction About(props) {\n  console.log(props);\n  return (\n    <div className=\"About\">\n      {props.children}\n    </div>\n  );\n}\n\nexport default About;","import React from 'react';\nimport './Footer.scss';\n\nfunction Footer() {\n  return (\n    <footer className=\"page-footer\">\n      \n    </footer>\n  );\n}\n\nexport default Footer;","import axios from 'axios';\n\nconst urls = {\n  products: \"https://symbols.sammeechward.com/products\",\n  productsLocal: \"http://localhost:4000/products\",\n  about: 'https://raw.githubusercontent.com/meech-ward/SF-Custom-Symbols/master/about.md'\n}\n\nexport async function getAboutInformation() {\n  const request = await axios.get(urls.about);\n  return request.data;\n}\n\nexport async function getProducts() {\n  const request = await axios.get(urls.products);\n  return request.data;\n}","import React, {Fragment, useState, useEffect }  from 'react';\n\nimport './App.css';\n\nimport Products from './components/Products';\nimport About from './components/About';\nimport Footer from './components/Footer';\nimport Markdown from 'markdown-to-jsx';\n\nimport {getAboutInformation, getProducts} from './network';\n\nfunction App() {\n\n  const [about, setAbout] = useState(\"\");\n  const [products, setProducts] = useState([]);\n\n  useEffect(() => {\n\n    (async () => {\n      try {\n        const [aboutText, products] = await Promise.all([getAboutInformation(), getProducts()]);\n        setAbout(aboutText);\n        setProducts(products);\n      } catch (error) {\n        console.log(\"Couldn't get about data or products\", error);\n      }\n    })();\n  }, []);\n  \n  \n  return (\n    <div className=\"App\">\n      <Products products={products}></Products>\n      <About><Markdown>{about}</Markdown></About>\n      <Footer></Footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}